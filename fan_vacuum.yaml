blueprint:
  name: Controllo Umidità con Ventola (Corretto)
  description: Gestisce la ventola del bagno in base al passaggio di umidità relativa.
  domain: automation
  input:
    umidita:
      name: Sensore Umidità Locale
      selector:
        entity:
          domain: sensor
          multiple: false
    umidita_riferimento:
      name: Sensore Umidità Base
      selector:
        entity:
          domain: sensor
          multiple: false
    percentuale_a:
      name: Percentuale A
      selector:
        number:
          min: 0
          max: 100
          step: 1.0
          unit_of_measurement: '%'
          mode: slider
    percentuale_b:
      name: Percentuale B
      selector:
        number:
          min: 0
          max: 100
          step: 1.0
          unit_of_measurement: '%'
          mode: slider
    switch_ventola:
      name: Switch Ventola
      selector:
        entity:
          domain: switch
          multiple: false
    sensore_booleano:
      name: Sensore Booleano
      selector:
        entity:
          domain: input_boolean
    minuti_timer:
      name: Minuti Timer
      description: Numero di minuti per cui la ventola rimarrà accesa se attivata manualmente.
      selector:
        number:
          min: 1
          max: 60
          step: 1.0
          unit_of_measurement: 'minuti'
          mode: slider

  trigger:
    - platform: state
      entity_id: !input umidita 
    - platform: state
      entity_id: !input switch_ventola 
      to: 'on'

  action:
    - variables:
        umidita_val: "{{ states(umidita).state | float }}"
        umidita_riferimento_val: "{{ states(umidita_riferimento).state | float }}"
        percentuale_a_val: "{{ percentuale_a | float }}"
        percentuale_b_val: "{{ percentuale_b | float }}"
        minuti_timer_val: "{{ minuti_timer }}"
        soglia_superiore: "{{ umidita_riferimento_val * (1 + percentuale_a_val / 100) }}"
        soglia_inferiore: "{{ umidita_riferimento_val * (1 + percentuale_b_val / 100) }}"
        umidita_precedente: "{{ trigger.from_state.state | float }}"
        trigger_passaggio_a: "{{ umidita_precedente <= soglia_superiore and umidita_val > soglia_superiore }}"
        trigger_passaggio_b: "{{ umidita_precedente > soglia_inferiore and umidita_val <= soglia_inferiore }}"

    - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger_passaggio_a }}"
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: !input sensore_booleano
          - service: switch.turn_on
            target:
              entity_id: !input switch_ventola
      - conditions:
          - condition: template
            value_template: "{{ trigger_passaggio_b }}"
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: !input sensore_booleano
          - service: switch.turn_off
            target:
              entity_id: !input switch_ventola
      - conditions:
          - condition: state
            entity_id: !input switch_ventola
            state: 'on'
        sequence:
          - delay: 
              minutes: "{{ minuti_timer_val }}"
          - condition: template
            value_template: "{{ is_state('sensore_booleano', 'off') }}"
          - service: switch.turn_off
            target:
              entity_id: !input switch_ventola
      - conditions:
          - condition: state
            entity_id: !input switch_ventola
            state: 'off'
          - condition: state
            entity_id: !input sensore_booleano
            state: 'on'
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: !input sensore_booleano
